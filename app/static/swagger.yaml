
swagger: '2.0'
info:
  version: "0.0.1"
  title: "Mechanic shop API"
  description: API documentation for Mechanic shop

host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    


paths:

  /customers/login:
    post:
      tags: 
        - "customers"
      summary: "Login a customer and receive a token"
      description: "Login a customer with email and password to receive an authentication token." 
      parameters:
        - in: "body"
          name: "Body"
          description: "Customer login credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Successful login"
          schema:
            $ref: "#/definitions/LoginResponse"
          examples:
            application/json:
              {
                "message": "Login successful customer name",
                "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
              }
                 
        400:
          description: "Invalid input"
        401:
          description: "Unauthorized - Invalid credentials"
        500:
          description: "Server error"  

  /customers:
    post:
      tags:
        - "customers"
      summary: "Create a new customer"
      description: "Register a new customer in the system."
      parameters:
        - in: "body"
          name: "Body"
          description: "Customer object that needs to be added, phone and address are optional"
          required: true
          schema:
            $ref: "#/definitions/CustomerInput"
      responses:
        201:
          description: "Customer created successfully"
          schema:
            $ref: "#/definitions/CustomerResponse"
          examples:
            application/json:
              {
                "id": 1,
                "first_name": "John",
                "last_name": "Doe",
                "email": "johndoe@email.com",
                "phone": "1234567890",
                "address": "123 Main St",
                "password": "<encrypted_password>"
              }
        400:
          description: "Invalid input"
        500:
          description: "Server error"               
  
    get:   
      tags:
        - "customers"
      summary: "Get all customers"
      description: "Retrieve a list of all customers in the system."
      responses:
        200:
          description: "A list of customers"
          schema:
            $ref: "#/definitions/CustomersResponse"
          examples:
            application/json:
              [
                {
                  "id": 1,
                  "first_name": "John",
                  "last_name": "Doe",
                  "email": "testing@email.com",
                  "phone": "1234567890",
                  "address": "123 Main St",
                  "password": "<encrypted_password>"
                },
                {
                  "id": 2,
                  "first_name": "Jane",
                  "last_name": "Smith",
                  "email": "testing@email.com",
                  "phone": "0987654321",
                  "address": "456 Elm St",
                  "password": "<encrypted_password>"  
                }
              ]
        500:
          description: "Server error"

    put: 
      tags:
        - "customers"
      summary: "Update a customer"
      description: "Update an existing customer's information. Requires authentication."
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "Body"
          description: "Customer object that needs to be updated, phone and address are optional"
          required: true
          schema:
            $ref: "#/definitions/CustomerInput"
      responses:
        200:
          description: "Customer updated successfully"
          schema:
            $ref: "#/definitions/CustomerResponse"
          examples:
            application/json:
              {
                "id": 1,
                "first_name": "John",
                "last_name": "Doe",
                "email": "testing@email.com",
                "phone": "1234567890",
                "address": "123 Main St",
                "password": "<encrypted_password>"
              }
        400:
          description: "Invalid input"
        401:
          description: "Unauthorized - Invalid or missing token"
        404:
          description: "Customer not found"
        500:
          description: "Server error"

    delete:
      tags:
        - "customers"
      summary: "Delete a customer"
      description: "Delete an existing customer from the system. Requires authentication."
      security:
        - bearerAuth: []
      responses:
        200:
          schema:
            type: object
            properties:
              message:
                type: string
          description: "Customer deleted successfully"
          examples:
            application/json:
              {
                "message": "Sorry to see you go, customer name!"
              }
        400:
          description: "Invalid input"
        401:
          description: "Unauthorized - Invalid or missing token"
        404:
          description: "Customer not found"
        500:
          description: "Server error"      



definitions:

  LoginCredentials:
    type: object
    properties:
      email:
        type: string
        examples:
          - "testing@e,ail.com"
      password:
        type: string
        examples:
          - "testing123"
    required:
      - email
      - password

  LoginResponse:
    type: object
    properties:
      message:
        type: string
      token:
        type: string  
      
  CustomerInput:     
    type: object
    properties:
      first_name:
        type: string
        examples:
          - "John"
      last_name:
        type: string
        examples:
          - "Doe"  
      email:
        type: string
        examples:
          - "testing@email.com"
      phone:
        type: string
        examples:
          - "1234567890"
      address:
        type: string
        examples:
          - "123 Main St"    
      password:
        type: string
        examples:
          - "testing123"
    required:
      - email
      - password
      - first_name
      - last_name

  CustomerResponse:
      type: object
      properties:
      id:
        type: integer
      first_name:
        type: string
      last_name:
        type: string  
      email:
        type: string
      phone:
        type: string
      address:
        type: string    
      password:
        type: string

  CustomersResponse:
      type: array
      items:
        type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string  
        email:
          type: string
        phone:
          type: string
        address:
          type: string    
        password:
          type: string

